#include <bits/stdc++.h>
#include<stdio.h>
#include<string.h>
using namespace std;

int main()
{
    //1.对NULL指针解引用操作
    //int* p = malloc(40);
    //对p进行相关的判断
    //*p = 10;//malloc开辟失败-对NULL指针解引用



    //2.对动态开辟内存的越界访问
    /*int *p = (int*)malloc(40);//10个int
    if(p == NULL)
    {
        return 0;
    }
    else
    {
        int i = 0;
        //越界访问
        for(i = 0; i<=10; i++)//算好空间
        {
            *(p+i) = i;
        }
        free(p);
        p = NULL;
    }*/



    //3.对非动态开辟内存使用free释放
    //如果不是动态开辟内存都不能用free
    /*int a = 10;//非动态内存是在栈上开辟的  动态内存是在堆上的
    int *p = &a;
    //...
    free(p);
    p = NULL;*/


    //4.使用free释放动态开辟内存的一部分
    /*int* p = (int*)malloc(40);
    if(p == NULL)
    {
        return 0;
    }
    int i = 0;
    for(i = 0; i<10; i++)
    {
        *p++ = i;//p的地址发生变化了
    }
    free(p);//p的地址发生变化，不再是起始位置，free只能从开辟内存的起始地址开始释放
    p = NULL;*/



    //5.对同一块动态内存多次释放
    /*int* p = (int*)malloc(40);
    if(p == NULL)
    {
        return 0;
    }
    //使用
    //释放空间
    free(p);
    //....忘记了没释放
    free(p);//重复释放*/
    //如何避免重复释放
    //释放后加个 NULL free如果释放NULL  相当于没用
    //free(p);
    //p = NULL;//最好加个NULL



    //6.动态开辟内存忘记释放（内存泄漏），相当恐怖，总是开辟不释放
    /*while(1)
    {
        malloc(1);//无限开辟,一定要记得释放
    }*/
    //动态开辟的内存一定要释放，并且要正确释放

}
